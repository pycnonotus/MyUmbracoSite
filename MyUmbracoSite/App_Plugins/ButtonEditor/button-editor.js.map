{"version":3,"file":"button-editor.js","sources":["src/my-element.ts"],"sourcesContent":["import { LitElement, html, css, customElement, property } from \"@umbraco-cms/backoffice/external/lit\";\r\nimport { UmbPropertyEditorUiElement } from \"@umbraco-cms/backoffice/property-editor\";\r\n// Explicitly import the content picker so that the custom element is registered:\r\n\r\n@customElement(\"my-button-property-editor-ui\")\r\n\r\nexport default class MySuggestionsPropertyEditorUIElement extends LitElement implements UmbPropertyEditorUiElement {\r\n  @property({ type: Boolean })\r\n  public addButton = false;\r\n\r\n  @property({ type: String })\r\n  public buttonText = \"\";\r\n\r\n  // For a single content item, we'll store it as an object (or null if none selected)\r\n  @property({ type: Object })\r\n  public selectedContentItem: any = null;\r\n\r\n  render() {\r\n    return html`\r\n      <!-- Checkbox: Ask if a button should be added -->\r\n      <uui-checkbox \r\n        id=\"add-button-checkbox\" \r\n        label=\"Add Button?\" \r\n        .checked=${this.addButton}\r\n        @change=${this._onAddButtonChanged}>\r\n      </uui-checkbox>\r\n\r\n      <!-- Conditionally show the text input and content picker -->\r\n      ${this.addButton ? html`\r\n        <br />\r\n        <label>Button Text</label>\r\n        <uui-input \r\n          id=\"button-text\" \r\n          label=\"Button Text\" \r\n          .value=${this.buttonText}\r\n          @input=${this._onButtonTextInput}>\r\n        </uui-input>\r\n        <label>Content Picker</label>\r\n\r\n    \r\n      ` : \"\"}\r\n    `;\r\n  }\r\n\r\n  static styles = [\r\n    css`\r\n      :host {\r\n        display: block;\r\n        margin: 10px;\r\n      }\r\n  \r\n    `\r\n  ];\r\n\r\n  private _onAddButtonChanged(e: Event) {\r\n    const target = e.target as HTMLInputElement;\r\n    this.addButton = target.checked;\r\n    if (!this.addButton) {\r\n      // Clear the additional fields when unchecked.\r\n      this.buttonText = \"\";\r\n      this.selectedContentItem = null;\r\n    }\r\n  }\r\n\r\n  private _onButtonTextInput(e: InputEvent) {\r\n    this.buttonText = (e.target as HTMLInputElement).value;\r\n  }\r\n\r\n  \r\n}\r\n\r\ndeclare global {\r\n  interface HTMLElementTagNameMap {\r\n    'my-button-property-editor-ui': MySuggestionsPropertyEditorUIElement;\r\n  }\r\n}"],"names":["MySuggestionsPropertyEditorUIElement","LitElement","html","target","css","__decorateClass","property","customElement"],"mappings":";;;;;;AAMqB,IAAAA,IAArB,cAAkEC,EAAiD;AAAA,EAAnH,cAAA;AAAA,UAAA,GAAA,SAAA,GAEE,KAAO,YAAY,IAGnB,KAAO,aAAa,IAIpB,KAAO,sBAA2B;AAAA,EAAA;AAAA,EAElC,SAAS;AACA,WAAAC;AAAA;AAAA;AAAA;AAAA;AAAA,mBAKQ,KAAK,SAAS;AAAA,kBACf,KAAK,mBAAmB;AAAA;AAAA;AAAA;AAAA,QAIlC,KAAK,YAAYA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAMN,KAAK,UAAU;AAAA,mBACf,KAAK,kBAAkB;AAAA;AAAA;AAAA;AAAA;AAAA,UAKhC,EAAE;AAAA;AAAA,EAAA;AAAA,EAcF,oBAAoB,GAAU;AACpC,UAAMC,IAAS,EAAE;AACjB,SAAK,YAAYA,EAAO,SACnB,KAAK,cAER,KAAK,aAAa,IAClB,KAAK,sBAAsB;AAAA,EAC7B;AAAA,EAGM,mBAAmB,GAAe;AACnC,SAAA,aAAc,EAAE,OAA4B;AAAA,EAAA;AAIrD;AA/DqBH,EAsCZ,SAAS;AAAA,EACdI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOF;AA5COC,EAAA;AAAA,EADNC,EAAS,EAAE,MAAM,QAAS,CAAA;AAAA,GADRN,EAEZ,WAAA,aAAA,CAAA;AAGAK,EAAA;AAAA,EADNC,EAAS,EAAE,MAAM,OAAQ,CAAA;AAAA,GAJPN,EAKZ,WAAA,cAAA,CAAA;AAIAK,EAAA;AAAA,EADNC,EAAS,EAAE,MAAM,OAAQ,CAAA;AAAA,GARPN,EASZ,WAAA,uBAAA,CAAA;AATYA,IAArBK,EAAA;AAAA,EAFCE,EAAc,8BAA8B;AAAA,GAExBP,CAAA;"}