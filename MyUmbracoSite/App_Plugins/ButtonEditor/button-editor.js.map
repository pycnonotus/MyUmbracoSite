{"version":3,"file":"button-editor.js","sources":["src/my-element.ts"],"sourcesContent":["import { LitElement, html, css, customElement, property } from \"@umbraco-cms/backoffice/external/lit\";\r\nimport { UmbPropertyEditorUiElement, UmbPropertyValueChangeEvent } from \"@umbraco-cms/backoffice/property-editor\";\r\n\r\n@customElement('my-button-property-editor-ui')\r\nexport default class MyButtonPropertyEditorUIElement extends LitElement implements UmbPropertyEditorUiElement {\r\n    // Store the raw serialized value\r\n    private _value: string = '';\r\n\r\n    @property({ type: String })\r\n    public get value(): string {\r\n        return this._value;\r\n    }\r\n    public set value(newValue: string | object) {\r\n        const oldValue = this._value;\r\n        // If newValue is not a string, serialize it.\r\n        if (typeof newValue !== \"string\") {\r\n            this._value = JSON.stringify(newValue);\r\n        } else {\r\n            this._value = newValue;\r\n        }\r\n        try {\r\n            // If newValue is a string, parse it; if it's already an object, use it directly.\r\n            const data =\r\n                typeof newValue === \"string\"\r\n                    ? JSON.parse(newValue || \"{}\")\r\n                    : newValue || {};\r\n            this.buttonEnabled = !!data.buttonEnabled;\r\n            this.buttonText = data.buttonText || \"\";\r\n            this.selectedContent = data.selectedContent || null;\r\n        } catch (e) {\r\n            console.error(\"Error parsing value:\", e);\r\n        }\r\n        this.requestUpdate(\"value\", oldValue);\r\n    }\r\n\r\n    @property({ type: Boolean })\r\n    public buttonEnabled = false;\r\n\r\n    @property({ type: String })\r\n    public buttonText = \"\";\r\n\r\n    // The selected content node (if any)\r\n    @property({ type: Object })\r\n    public selectedContent: any = null;\r\n\r\n    static styles = css`\r\n        :host {\r\n            display: block;\r\n            padding: 1rem;\r\n            font-family: Arial, sans-serif;\r\n        }\r\n        .form-field {\r\n            margin-bottom: 1rem;\r\n        }\r\n        label {\r\n            display: block;\r\n            margin-bottom: 0.5rem;\r\n            font-weight: bold;\r\n        }\r\n        .required {\r\n            color: red;\r\n        }\r\n    `;\r\n\r\n    render() {\r\n        return html`\r\n            <!-- Checkbox to enable/disable button settings -->\r\n            <div class=\"form-field\">\r\n                <label for=\"button-toggle\">Button Enabled</label>\r\n                <uui-checkbox\r\n                        id=\"button-toggle\"\r\n                        .checked=${this.buttonEnabled}\r\n                        @change=${this._onCheckboxChange}>\r\n                </uui-checkbox>\r\n            </div>\r\n\r\n            <!-- Render text input and content picker only if the button is enabled -->\r\n            ${this.buttonEnabled\r\n                    ? html`\r\n                        <div class=\"form-field\">\r\n                            <label for=\"button-text\">\r\n                                Button Text <span class=\"required\">*</span>\r\n                            </label>\r\n                            <uui-input\r\n                                    id=\"button-text\"\r\n                                    .value=${this.buttonText}\r\n                                    @input=${this._onTextInput}\r\n                                    required>\r\n                            </uui-input>\r\n                        </div>\r\n                        <div class=\"form-field\">\r\n                            <label>\r\n                                Button Content <span class=\"required\">*</span>\r\n                            </label>\r\n                            <div class=\"flex-container\">\r\n                                <umb-input-content\r\n                                        .min=${1}\r\n                                        .max=${1}\r\n                                        .selection=${this.selectedContent}\r\n                                        @change=${this._onContentChange}\r\n                                        required>\r\n                                </umb-input-content>\r\n                            </div>\r\n                        </div>\r\n                    `\r\n                    : \"\"}\r\n        `;\r\n    }\r\n\r\n    private _onCheckboxChange(e: CustomEvent) {\r\n        const target = e.target as HTMLInputElement;\r\n        this.buttonEnabled = target.checked;\r\n        this._updateValue();\r\n        console.log(\"Button enabled:\", this.buttonEnabled);\r\n    }\r\n\r\n    private _onTextInput(e: Event) {\r\n        const target = e.target as HTMLInputElement;\r\n        this.buttonText = target.value;\r\n        this._updateValue();\r\n        console.log(\"Button text:\", this.buttonText);\r\n    }\r\n\r\n    // Handler for the content picker's change event.\r\n    private _onContentChange(e: CustomEvent & { target: any }) {\r\n        // Assume the content picker exposes the selection via a property named `selection`\r\n        this.selectedContent = e.target.selection;\r\n        this._updateValue();\r\n        console.log(\"Selected content:\", this.selectedContent);\r\n    }\r\n\r\n    // Serialize the current state and dispatch a change event.\r\n    private _updateValue() {\r\n        const newValue = JSON.stringify({\r\n            buttonEnabled: this.buttonEnabled,\r\n            buttonText: this.buttonText,\r\n            selectedContent: this.selectedContent,\r\n        });\r\n        this._value = newValue;\r\n        this.dispatchEvent(new UmbPropertyValueChangeEvent());\r\n    }\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"my-button-property-editor-ui\": MyButtonPropertyEditorUIElement;\r\n    }\r\n}\r\n"],"names":["MyButtonPropertyEditorUIElement","LitElement","newValue","oldValue","data","e","html","target","UmbPropertyValueChangeEvent","css","__decorateClass","property","customElement"],"mappings":"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"}