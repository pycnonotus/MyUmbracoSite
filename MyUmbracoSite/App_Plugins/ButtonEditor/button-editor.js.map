{"version":3,"file":"button-editor.js","sources":["src/my-element.ts"],"sourcesContent":["import { LitElement, html, css, customElement, property } from \"@umbraco-cms/backoffice/external/lit\";\r\nimport { UmbPropertyEditorUiElement, UmbPropertyValueChangeEvent } from \"@umbraco-cms/backoffice/property-editor\";\r\n\r\n@customElement('my-button-property-editor-ui')\r\nexport default class MyButtonPropertyEditorUIElement extends LitElement implements UmbPropertyEditorUiElement {\r\n    // Internal storage for the serialized value\r\n    private _value: string = '';\r\n\r\n    @property({ type: String })\r\n    public get value(): string {\r\n        return this._value;\r\n    }\r\n    public set value(newValue: string | object) {\r\n        const oldValue = this._value;\r\n        if (typeof newValue !== \"string\") {\r\n            this._value = JSON.stringify(newValue);\r\n        } else {\r\n            this._value = newValue;\r\n        }\r\n        try {\r\n            const data =\r\n                typeof newValue === \"string\"\r\n                    ? JSON.parse(newValue || \"{}\")\r\n                    : newValue || {};\r\n            this.buttonEnabled = !!data.buttonEnabled;\r\n            this.buttonText = data.buttonText || \"\";\r\n            this.selectedContent = data.selectedContent || null;\r\n        } catch (e) {\r\n            console.error(\"Error parsing value:\", e);\r\n        }\r\n        this.requestUpdate(\"value\", oldValue);\r\n    }\r\n\r\n    @property({ type: Boolean })\r\n    public buttonEnabled = false;\r\n\r\n    @property({ type: String })\r\n    public buttonText = \"\";\r\n\r\n    // The selected content node (if any)\r\n    @property({ type: Object })\r\n    public selectedContent: any = null;\r\n\r\n    // Optional property to hold validation errors\r\n    @property({ type: Array })\r\n    private _validationErrors: string[] = [];\r\n\r\n    static styles = css`\r\n    :host {\r\n      display: block;\r\n      padding: 1rem;\r\n      font-family: Arial, sans-serif;\r\n    }\r\n    .form-field {\r\n      margin-bottom: 1rem;\r\n    }\r\n    label {\r\n      display: block;\r\n      margin-bottom: 0.5rem;\r\n      font-weight: bold;\r\n    }\r\n    .required {\r\n      color: red;\r\n    }\r\n    .error-messages {\r\n      color: red;\r\n      margin-top: 0.5rem;\r\n    }\r\n  `;\r\n\r\n    render() {\r\n        return html`\r\n            <!-- Checkbox to enable/disable button settings -->\r\n            <div class=\"form-field\">\r\n                <label for=\"button-toggle\">Button Enabled</label>\r\n                <uui-checkbox\r\n                        id=\"button-toggle\"\r\n                        .checked=${this.buttonEnabled}\r\n                        @change=${this._onCheckboxChange}>\r\n                </uui-checkbox>\r\n            </div>\r\n\r\n            <!-- Render text input and content picker only if button is enabled -->\r\n            ${this.buttonEnabled\r\n                    ? html`\r\n                        <div class=\"form-field\">\r\n                            <label for=\"button-text\">\r\n                                Button Text <span class=\"required\">*</span>\r\n                            </label>\r\n                            <uui-input\r\n                                    id=\"button-text\"\r\n                                    .value=${this.buttonText}\r\n                                    @input=${this._onTextInput}\r\n                                    required>\r\n                            </uui-input>\r\n                        </div>\r\n                        <div class=\"form-field\">\r\n                            <label>\r\n                                Button Content <span class=\"required\">*</span>\r\n                            </label>\r\n                            <div class=\"flex-container\">\r\n                                <umb-input-content\r\n                                        .min=${1}\r\n                                        .max=${1}\r\n                                        .selection=${this.selectedContent}\r\n                                        @change=${this._onContentChange}\r\n                                        required>\r\n                                </umb-input-content>\r\n                            </div>\r\n                        </div>\r\n                    `\r\n                    : \"\"}\r\n            ${this._validationErrors.length\r\n                    ? html`\r\n            <div class=\"error-messages\">\r\n              ${this._validationErrors.map(\r\n                            (error) => html`<p>${error}</p>`\r\n                    )}\r\n            </div>\r\n          `\r\n                    : \"\"}\r\n        `;\r\n    }\r\n\r\n    private _onCheckboxChange(e: CustomEvent) {\r\n        const target = e.target as HTMLInputElement;\r\n        this.buttonEnabled = target.checked;\r\n        this._updateValue();\r\n        console.log(\"Button enabled:\", this.buttonEnabled);\r\n    }\r\n\r\n    private _onTextInput(e: Event) {\r\n        const target = e.target as HTMLInputElement;\r\n        this.buttonText = target.value;\r\n        this._updateValue();\r\n        console.log(\"Button text:\", this.buttonText);\r\n    }\r\n\r\n    private _onContentChange(e: CustomEvent & { target: any }) {\r\n        // Assume the picker exposes the selection in a property called 'selection'\r\n        this.selectedContent = e.target.selection;\r\n        this._updateValue();\r\n        console.log(\"Selected content:\", this.selectedContent);\r\n    }\r\n\r\n    // Validate the required fields. Returns true if valid, false otherwise.\r\n    public validate(): boolean {\r\n        this._validationErrors = [];\r\n        if (this.buttonEnabled) {\r\n            if (!this.buttonText || this.buttonText.trim() === \"\") {\r\n                this._validationErrors.push(\"Button text is required.\");\r\n            }\r\n            if (!this.selectedContent) {\r\n                this._validationErrors.push(\"Content selection is required.\");\r\n            }\r\n        }\r\n        this.requestUpdate();\r\n        return this._validationErrors.length === 0;\r\n    }\r\n\r\n    // Serialize the current state and dispatch a change event.\r\n    private _updateValue() {\r\n        const newValue = JSON.stringify({\r\n            buttonEnabled: this.buttonEnabled,\r\n            buttonText: this.buttonText,\r\n            selectedContent: this.selectedContent,\r\n        });\r\n        this._value = newValue;\r\n        this.dispatchEvent(new UmbPropertyValueChangeEvent());\r\n    }\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        \"my-button-property-editor-ui\": MyButtonPropertyEditorUIElement;\r\n    }\r\n}\r\n"],"names":["MyButtonPropertyEditorUIElement","LitElement","newValue","oldValue","data","e","html","error","target","UmbPropertyValueChangeEvent","css","__decorateClass","property","customElement"],"mappings":"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"}